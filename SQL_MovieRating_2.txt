(Cont. from part 1)


Q1: Find the names of all reviewers who rated Gone with the Wind. 

select distinct name
from Reviewer natural join Rating
where mID in (select mID from Movie where title ='Gone with the Wind');


Q2: For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

select name, title, stars
from Movie natural join Reviewer natural join Rating
where name = director;


Q3: Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

select name 
from Reviewer 
union 
select title
from Movie
order by name, title;


Q4: Find the titles of all movies not reviewed by Chris Jackson. 

select title
from Movie 
where mID not in (select mID from Rating natural join Reviewer where name = 'Chris Jackson');


Q5: For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. 

select distinct R1.name,R2.name
from (Rating natural join Reviewer) as R1 join (Rating natural join Reviewer) as R2 using (mID)
where R1.name < R2.name;


Q6: For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. 

select name, title, stars
from Movie natural join Reviewer natural join (select rID,mID, stars 
from Rating 
where stars in (select min(stars)
from Rating));


Q7: List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

select title, mean
from Movie join (select mID,avg(stars) as mean
    from Rating
    group by mID) using (mID)
order by mean desc,title;


Q8: Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

(Using COUNT and HAVING)
select name 
from Reviewer join Rating using (rID)
group by rID
having count(stars)>=3;


select name
from Reviewer r 
where 3<=(select count(*)
          from Rating 
          where Rating.rID = r.rID);


Q9: Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 

select title, director
from Movie 
where director in (select director from Movie group by director having count(*)>1)
order by director, title;

(without count)
select m1.title,m1.director
from Movie as m1 join Movie as m2
where m1.mID <> m2.mID and m1.director = m2.director
order by m1.director,m1.title;


Q10:Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)

select title, m
from (select mID,avg(stars) as m
    from Rating 
    group by mID) join Movie using (mID)
where m = (select max(mean)
                   from (select mID,avg(stars) as mean
                        from Rating 
                        group by mID));


Q11:Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 

select title, m
from (select mID,avg(stars) as m
    from Rating 
    group by mID) join Movie using (mID)
where m = (select min(mean)
                   from (select mID,avg(stars) as mean
                        from Rating 
                        group by mID));


Q12:For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

select director,title,max(stars)
from Rating join (select* from Movie where director is not null) using (mID)
group by director;